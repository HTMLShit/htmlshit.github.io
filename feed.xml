<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>@htmlshit</title>
  <subtitle></subtitle>
  <link href="https://htmlshit.site/feed.xml" rel="self"/>
  <link href="https://htmlshit.site/"/>
  <updated>2021-03-20T00:00:00Z</updated>
  <id>https://htmlshit.site</id>
  <author>
    <name>Sergey Bekharsky</name>
  </author>
  
    
    <entry>
      <title>Солидбук</title>
      <link href="https://htmlshit.site/blog/solidbook/"/>
      <updated>2021-01-17T00:00:00Z</updated>
      <id>https://htmlshit.site/blog/solidbook/</id>
      <content type="html">
        <![CDATA[
      <p>Поскольку на данный момент значимую аудиторию канала составляют студенты курсов, было бы нелишним упомянуть о хороших образовательных проектах. Но тема эта слишком огромная, потому начнём с прямых запросов.</p>
<p>В чате канала (@htmlshitchat) проскочило желание почитать об объектно-ориентированном программировании (ООП). Выражено оно было довольно абстрактно, но всё же попробую.</p>
<p>Если бросить в студента книгу <a href="https://ru.wikipedia.org/wiki/Design_Patterns">Паттерны проектирования</a> за авторством “Банды четырёх” и отойти в сторону, можно долго наблюдать за агонией. Но это слишком жестоко, потому пойдём по пути более общих рекомендаций.</p>
<p>Подход ООП, вне зависимости от того, следуете вы ему или нет, позводяет проектировать системы на языке, близком к языку бизнес-правил. Это снижает вероятность ошибки при переводе с «языка бизнеса» на «язык разработки» и наоборот.</p>
<p>В определённый момент на пути любого разработчика встретится понятие, рождённое в ООП-мире: <a href="https://ru.wikipedia.org/wiki/SOLID_(%D0%BE%D0%B1%D1%8A%D0%B5%D0%BA%D1%82%D0%BD%D0%BE-%D0%BE%D1%80%D0%B8%D0%B5%D0%BD%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%BD%D0%BE%D0%B5_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5)">SOLID</a>. Можно, опять же, сходить в Википедию и почитать, что это такое, а можно воспользоваться отличным ресурсом <a href="https://ota-solid.now.sh/">Солидбук</a>.</p>
<p>Авторы, <a href="https://bespoyasov.ru/">Саша Беспоясов</a> и <a href="https://github.com/dex157">Артём Самофалов</a>, объясняют пять принципов, образующих SOLID, на понятных примерах, а в конце каждой секции имеется краткий опросник (<em>флешбеки из школьных времён</em>).</p>
<p>Личный сайт Беспоясова я вообще горячо рекомендую: загляните в раздел <a href="https://bespoyasov.ru/projects/">Проекты</a>, вам понравится.</p>

    ]]>
      </content>
    </entry>
  
    
    <entry>
      <title>CSS-in-JS. Начало</title>
      <link href="https://htmlshit.site/blog/css-in-js-intro/"/>
      <updated>2021-02-14T00:00:00Z</updated>
      <id>https://htmlshit.site/blog/css-in-js-intro/</id>
      <content type="html">
        <![CDATA[
      <p>Это пролог к статье о <a href="/blog/styled-components">Styled Components</a>. Если вам интересно, как мы дошли до жизни такой, рекомендую начать именно отсюда. Сразу задам тон повествования: я предполагаю, что с JavaScript и React вы уже знакомы. Вам сейчас придётся согласиться, что HTML в JS это нормально, а CSS в JS, как минимум, тоже.</p>
<h2>Компонентный подход</h2>
<p>Вы все, наверное, слышали понятие «разделение ответственности» (separation of concerns). Для веб-разработки вообще и вёрстки в частности это означало (и до сих пор означает, в целом) следующее: отделение структуры документа от внешнего вида и поведения. HTML отдельно, CSS отдельно, JavaScript отдельно. Но только ли это?</p>
<p>Вот нужна вам кнопка. Что вы делаете? Правильно: определяете её в HTML, составляете стили по её классу в CSS и пишете скрипт:</p>
<pre class="language-html"><code class="language-html"><span class="token comment">&lt;!-- index.html --></span><br><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myButton<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>my-button<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Нажми меня<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><br><br><span class="token comment">&lt;!-- style.css --></span><br><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><br>  <span class="token selector">.my-button</span> <span class="token punctuation">{</span><br>    <span class="token property">border</span><span class="token punctuation">:</span> 1px solid cyan<span class="token punctuation">;</span><br>    <span class="token property">background</span><span class="token punctuation">:</span> transparent<span class="token punctuation">;</span><br>    <span class="token property">color</span><span class="token punctuation">:</span> cyan<span class="token punctuation">;</span><br>  <span class="token punctuation">}</span><br></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><br><br><span class="token comment">&lt;!-- script.js --></span><br><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><br>  <span class="token keyword">const</span> myButton <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'myButton'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>  myButton<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span><br>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'My click!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre>
<p>Прекрасно, кнопка есть, можно использовать где угодно. Но где угодно ли? Она вот, в нашем документе лежит. Для начала, её нужно, как минимум, скопировать, а как максимум – озаботиться уникальным идентификатором, набросать классов для различного оформления, дописать JavaScript обработчики на каждую задачу... а потом всё это ещё и поддерживать в разных местах и таскать из проекта в проект. Да что там, даже в рамках одного проекта занятие муторное.</p>
<p>Давайте немного подумаем. А что, если разделение ответственности – оно не про отделение представления и поведения от структуры, а про разбиение большой задачи на куски поменьше, на...</p>
<h3>Компоненты</h3>
<p>Каждый компонент решает свою задачу и решает её хорошо: кнопка реагирует на нажатие, поле ввода – откликается на ошибки пользователя, а модальное окно – само определяет, на каком устройстве оно было открыто. Ответственность разделена? <a href="https://speakerdeck.com/didoo/let-there-be-peace-on-css?slide=62" target="_blank">Вполне</a>, просто немного иначе:</p>
<p><img src="/images/soc.png" alt="Separation of concerns" title="Разделение ответственности"></p>
<p>Обратили внимание на цветовую кодировку классического разделения? Она никуда не делась и в компонентном подходе, а буквально <strong>размылась</strong> в нём: компонент должен полностью отвечать за свою структуру, поведение и внешний вид. Это довольно простой концепт, но многим до сих пор тяжело его принять.</p>
<h3>JSX</h3>
<p><a href="https://reactjs.org/" target="_blank">React</a> стал одной из первых библиотек (гусары, молчать!), принёсшей компоненты в народ. Концепция JSX - HTML код совмещённый с JavaScript - была <a href="https://en.wikipedia.org/wiki/ECMAScript_for_XML" target="_blank">не новой</a>, но создателям React удалось донести её в понятной форме массе веб-разработчиков.</p>
<p>JSX по определению решает лишь задачу объединения структуры части документа с поведением этой самой части:</p>
<pre class="language-jsx"><code class="language-jsx"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">MyButton</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>  <span class="token keyword">return</span> <span class="token punctuation">(</span><br>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>my-button<span class="token punctuation">"</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>handleClick<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text"><br>      Нажми меня<br>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><br>  <span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token punctuation">}</span></code></pre>
<p>Вопрос же стилей при этом всё ещё открыт и по-умолчанию классы наше всё. Впрочем, гибкость React и JSX позволяет решить вопрос разными способами.</p>
<h3>Vue.js и CSS Modules</h3>
<p>Ребята из <a href="https://vuejs.org/">Vue.js</a> подошли к работе со стилями серьёзней. Давайте посмотрим на простой файловый компонент (<code>.vue</code>):</p>
<pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span><br>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>paragraph<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> World!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><br><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><br><br><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><br>  module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span><br>    <span class="token function-variable function">data</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>      <span class="token keyword">return</span> <span class="token punctuation">{</span><br>        greeting<span class="token operator">:</span> <span class="token string">'Hello'</span><span class="token punctuation">,</span><br>      <span class="token punctuation">}</span><span class="token punctuation">;</span><br>    <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">}</span><span class="token punctuation">;</span><br></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><br><br><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><br>  <span class="token selector">.paragraph</span> <span class="token punctuation">{</span><br>    <span class="token property">font-size</span><span class="token punctuation">:</span> 2em<span class="token punctuation">;</span><br>    <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><br>  <span class="token punctuation">}</span><br></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre>
<p>Что бросается в глаза? Мне – <code>style scoped</code>. В экосистеме Vue.js используются <a href="https://github.com/css-modules/css-modules" target="_blank">CSS-модули</a> на основе реализации от <a href="https://github.com/css-modules/postcss-modules" target="_blank">PostCSS</a>. Область видимости стилей – текущий компонент, и собирается примерно в такое:</p>
<pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><br>  <span class="token selector">.paragraph[data-v-f3f3eg9]</span> <span class="token punctuation">{</span><br>    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><br>  <span class="token punctuation">}</span><br></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><br><br><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span><br>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>paragraph<span class="token punctuation">"</span></span> <span class="token attr-name">data-v-f3f3eg9</span><span class="token punctuation">></span></span>hi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><br><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre>
<p>Аналогичный результат можно получить в любом современном фреймворке. В принципе, CSS-модули в совокупности с пользовательскими свойствами – это прекрасная альтернатива CJS.</p>
<h3>Погоди, а с CSS-то что не так?</h3>
<p>Ну вообще-то, много чего:</p>
<ul>
<li>Всё написанное вами попадает в глобальную область видимости<br>
<small>Впрочем, это решается <a href="https://github.com/css-modules/css-modules" target="_blank">CSS-модулями</a> или строгими соглашениями об именовании (кто сказал БЭМ?)</small></li>
<li>Управление зависимостями напоминает ад<br>
<small>Может быть решено препроцессорами, а в совокупности с модулями npm - становится достаточно похоже на то, что имеем в JS</small></li>
<li>Отследить неиспользуемый код очень сложно<br>
<small>Существуют инструменты вроде <a href="https://github.com/FullHuman/purgecss" target="_blank">PurgeCSS</a> и <a href="https://github.com/leeoniya/dropcss" target="_blank">DropCSS</a>, их настройка может быть непростой, но часть головной боли снимут, рекомендую ознакомиться</small></li>
<li>Код может стать довольно объёмным<br>
<small>Минификация и удаление неиспользуемого кода решают лишь часть проблем, в идеале решение должно быть комплексным и закрывать вопросы с длиной HTML-классов</small></li>
<li>Ещё не так давно не было стандартного способа задавать константы<br>
<small>Препроцессоры и пользовательские свойства FTW</small></li>
<li>«Жадность» определений<br>
<small>Стоит быть очень аккуратным при составлении API ваших компонентов и идти от простого к сложному, заранее продумывая все возможные состояния и варианты использования.</small></li>
<li>Возможности управления состоянием стилей из скриптов весьма ограничены и сложны<br>
<small>С приходом пользовательских свойств всё стало гораздо лучше</small></li>
<li>Ваш прекрасный набор классов для оформления запросто ломает некто, вооружённый * и &gt;<br>
<small>Опять же, возвращаемся к проблеме глобальной области видимости. Всё, что туда попало и заранее известно – может быть переопределено</small></li>
</ul>
<p><img src="/images/awesome.png" alt="CSS is awesome" title="CSS is awesome"></p>
<p>В сухом остатке, никто не мешает так продумать устройство ваших компонентов, чтобы не столкнуться с вышеописанными проблемами, но если половина из них может быть решена на корню иными инструментами – почему бы не попробовать? Встречайте...</p>
<h2>CSS в JS</h2>
<h3>Do it with style</h3>
<p>Мы и раньше могли обращаться к стилям DOM-узлов через свойство style, считывая и устанавливая значение свойства style связанного с узлом элемента:</p>
<pre class="language-javascript"><code class="language-javascript">el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">'white'</span><span class="token punctuation">;</span><br>el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token string">'cyan'</span><span class="token punctuation">;</span></code></pre>
<p>В итоге мы получаем генерированный атрибут style, который ещё называют <strong>инлайновыми</strong> стилями:</p>
<pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token style-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token style language-css"><span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span> <span class="token property">background-color</span><span class="token punctuation">:</span> cyan</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>Hello Styles!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>
<p>Минусы? Никаких вам псевдоклассов, никаких вам псевдоэлементов, никакой развитой анимации. Об отсутствии централизованного управления внешним видом множества элементов единовременно и объединения стилей (кажется, это худшая в мире ода CSS-классам) можно забыть. И об автоматических браузерных префиксах тоже. И о кешировании, естественно. И производительность, естественно, минимальная. Плюсы? Это бронебойно и точно работает (пока кто-нибудь !important не наставил).</p>
<h3>Красивее как-то можно?</h3>
<p>В JSX – можно:</p>
<pre class="language-jsx"><code class="language-jsx"><span class="token keyword">const</span> divStyle <span class="token operator">=</span> <span class="token punctuation">{</span><br>  color<span class="token operator">:</span> <span class="token string">'white'</span><span class="token punctuation">,</span><br>  backgroundColor<span class="token operator">:</span> <span class="token string">'cyan'</span><span class="token punctuation">,</span><br><span class="token punctuation">}</span><span class="token punctuation">;</span><br><br><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">HelloStylesComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>divStyle<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">Hello React Styles!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">;</span><br><span class="token punctuation">}</span></code></pre>
<p>Минусы, в целом, всё те же. Но тем не менее, в 2014 году об этом <a href="https://speakerdeck.com/vjeux/react-css-in-js" target="_blank">рассказали</a> на одной из первых посвящённых реакту конференций, пригласив сообщество к дискуссии.</p>
<h3>CSS-in-JS</h3>
<p>Подход CJS предполагает, что описанные вами стили – неважно, будут они реализованы на CSS-подобном языке или через JS-объекты – применятся к вашим элементам через обычные классы, которые будут автоматически выстраиваться в нужную вам композицию. Вы получаете всё, что имели в CSS, плюс динамические возможности JavaScript.</p>
<p>В очень грубом приближении, при выполнении или сборке вашего кода будут автоматически созданы классы HTML-элементов и создастся тег <code>&lt;style&gt;</code> и/или CSS-файл со всеми нужными правилами.</p>
<p>Плюсы:</p>
<ul>
<li>Соблюдается принцип единой ответственности: компонент полностью отвечает за свой внешний вид и поведение</li>
<li>Самоудаление «мёртвого» (неиспользуемого) кода</li>
<li>Динамические возможности ограничены лишь вашей готовностью их контролировать</li>
<li>Никаких проблем с именованием классов</li>
<li>Контроль состояния в любой момент</li>
<li>Изоляция стилей</li>
</ul>
<p>Минусы:</p>
<ul>
<li>Производительность ниже, чем у классического подхода<br>
<small>Верно не всегда, библиотеки вроде <a href="https://linaria.dev/" target="_blank">linaria</a> генерируют отдельный CSS-файл, контролируемый пользовательскими свойствами, рассмотрим позже</small></li>
<li>Требуется некоторое время на привыкание<br>
<small>Первое что приходит в голову – синтаксис, второе – сам подход</small></li>
<li>Лучшие возможности требуют дополнительной настройки сборки<br>
<small>Упрощение отладки, объединение и атомизация классов</small></li>
<li>Сложности с поддержкой редакторами кода<br>
<small>Верно не всегда, разве только вы не используете что-то редкое</small></li>
<li>Стили не применятся, пока не выполнится JS<br>
<small>Верно не всегда, см. первый пункт</small></li>
<li>Очевидно, стили кешироваться отдельно от скриптов не смогут<br>
<small>Также см. первый пункт</small></li>
</ul>
<p>Кстати, в CJS возможна автоматическая <strong>атомизация</strong> классов, что позволяет сжать ваш код до предела. Представьте себе, что все написанные вами правила сгруппируются и выстроятся в ровную композицию. Без <a href="https://tailwindcss.com/" target="_blank">Tailwind CSS</a> и прочих подходов из нулевых (вы правда думали, что Tailwind первый такой? Поглядите на Tachyons, я даже ссылку давать не хочу). Отлаживать это, конечно, будет непросто, зато размер сборки минимальный и скорость максимальна. Если интересен результат такого подхода – взгляните на недавний редизайн Facebook.</p>
<p>Давайте пройдёмся по примерам из нескольких популярных библиотек.</p>
<h2>Что в наличии?</h2>
<h3>JSS</h3>
<p>Само понятие CSS-in-JS узурпировал (создал?) <a href="https://cssinjs.org/" target="_blank">JSS</a>. Первый известный релиз на GitHub датируется 2014 годом сразу с версии 0.2.1, можно предположить, что сама идея зародилась и раньше. Если вы хоть раз использовали <a href="https://material-ui.com/" target="_blank">Material UI</a>, вы использовали и JSS. Наверняка не все пытались переопределить встроенные стили их компонентов (если интересно, как-нибудь расскажу), потому давайте взглянем на пример, взят из документации с упрощениями:</p>
<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">import</span> jss <span class="token keyword">from</span> <span class="token string">'jss'</span><span class="token punctuation">;</span><br><span class="token keyword">import</span> color <span class="token keyword">from</span> <span class="token string">'color'</span><span class="token punctuation">;</span><br><br><span class="token keyword">const</span> styles <span class="token operator">=</span> <span class="token punctuation">{</span><br>  <span class="token string">'@global'</span><span class="token operator">:</span> <span class="token punctuation">{</span><br>    body<span class="token operator">:</span> <span class="token punctuation">{</span><br>      color<span class="token operator">:</span> <span class="token string">'green'</span><span class="token punctuation">,</span><br>    <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  button<span class="token operator">:</span> <span class="token punctuation">{</span><br>    <span class="token string">'&amp;:hover'</span><span class="token operator">:</span> <span class="token punctuation">{</span><br>      background<span class="token operator">:</span> <span class="token string">'blue'</span><span class="token punctuation">,</span><br>    <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  ctaButton<span class="token operator">:</span> <span class="token punctuation">{</span><br>    extend<span class="token operator">:</span> <span class="token string">'button'</span><span class="token punctuation">,</span><br>    <span class="token string">'&amp;:hover'</span><span class="token operator">:</span> <span class="token punctuation">{</span><br>      background<span class="token operator">:</span> <span class="token function">color</span><span class="token punctuation">(</span><span class="token string">'blue'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">darken</span><span class="token punctuation">(</span><span class="token number">0.3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><br>    <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token string">'@media (min-width: 1024px)'</span><span class="token operator">:</span> <span class="token punctuation">{</span><br>    button<span class="token operator">:</span> <span class="token punctuation">{</span><br>      width<span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span><br>    <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br><span class="token punctuation">}</span><span class="token punctuation">;</span><br><br><span class="token keyword">const</span> <span class="token punctuation">{</span> classes <span class="token punctuation">}</span> <span class="token operator">=</span> jss<span class="token punctuation">.</span><span class="token function">createStyleSheet</span><span class="token punctuation">(</span>styles<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><br>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"><br>  &lt;button class="</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>classes<span class="token punctuation">.</span>button<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">">Button&lt;/button><br>  &lt;button class="</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>classes<span class="token punctuation">.</span>ctaButton<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">">CTA Button&lt;/button><br></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span></code></pre>
<p>Обратили внимание? Тут React <strong>отсутствует</strong>, подход применим к любой реализации. Библиотек CSS-in-JS, не завязанных на React, гораздо больше одной, но, как уже было упомянуто, React и JSX в данном цикле статей применены лишь для собственного удобства автора.</p>
<p>Ещё мне нравится логотип JSS, он максимально издевательский:</p>
<p><img src="/images/jss.png" alt="JSS Logo" title="JSS is Awesome"></p>
<p>Библиотека до сих пор развивается, существует огромное количество плагинов, можно даже, используя <a href="https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/template_strings#%D1%82%D0%B5%D0%B3%D0%BE%D0%B2%D1%8B%D0%B5_%D1%88%D0%B0%D0%B1%D0%BB%D0%BE%D0%BD%D1%8B" target="_blank">теговые шаблоны</a> писать обычный CSS. А можно, используя <code>jss-nested</code>, обращаться к вложенным компонентам. Но вообще...</p>
<p>Это всё больше похоже на какую-то дикую смесь, чем на CSS. Тут вам на одном уровне даются простые свойства объекта, которые можно переиспользовать и расширять, псевдоклассы/элементы, at-правила, селекторы... Честно говоря, выглядит это всё довольно жутковато. Но многим понравилось (многие JS-программисты в CSS не умеют, простите мне эту вольность), а недостатки и условная сложность JSS открыли дорогу иным решениям. Кстати, всё в том же Material UI <a href="https://github.com/mui-org/material-ui/issues/20012" target="_blank">рассматривают</a> возможность замены JSS на Styled Components.</p>
<h3>jsxstyle</h3>
<p><a href="https://github.com/jsxstyle/jsxstyle" target="_blank">Появился</a> в 2015 году специально для React (и Preact). Предоставляет набор базовых компонентов, имеющих стили по-умолчанию, и позволяющий их расширять передавая свойства (props) прямо в этот компонент.</p>
<table>
<thead>
<tr>
<th>Компонент</th>
<th>Стили</th>
</tr>
</thead>
<tbody>
<tr>
<td>Block</td>
<td>display: block;</td>
</tr>
<tr>
<td>Inline</td>
<td>display: inline;</td>
</tr>
<tr>
<td>InlineBlock</td>
<td>display: inline-block;</td>
</tr>
<tr>
<td>Row</td>
<td>display: flex; flex-direction: row;</td>
</tr>
<tr>
<td>Col</td>
<td>display: flex; flex-direction: column;</td>
</tr>
<tr>
<td>InlineRow</td>
<td>display: inline-flex; flex-direction: row;</td>
</tr>
<tr>
<td>InlineCol</td>
<td>display: inline-flex; flex-direction: column;</td>
</tr>
<tr>
<td>Grid</td>
<td>display: grid;</td>
</tr>
<tr>
<td>Box</td>
<td>Без стилей</td>
</tr>
</tbody>
</table>
<p>Работает это всё как-то так:</p>
<pre class="language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Row</span></span> <span class="token attr-name">alignItems</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span> <span class="token attr-name">padding</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">15</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text"><br>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Block</span></span><br>    <span class="token attr-name">backgroundColor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#EEE<span class="token punctuation">"</span></span><br>    <span class="token attr-name">borderRadius</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">}</span></span><br>    <span class="token attr-name">height</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">320</span><span class="token punctuation">}</span></span><br>    <span class="token attr-name">width</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">200</span><span class="token punctuation">}</span></span><br>    <span class="token attr-name">backgroundSize</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>contain<span class="token punctuation">"</span></span><br>    <span class="token attr-name">backgroundImage</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url(https://i.ytimg.com/vi/j83eF9GHRcM/hq720.jpg)<span class="token punctuation">"</span></span><br>  <span class="token punctuation">/></span></span><span class="token plain-text"><br>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Col</span></span> <span class="token attr-name">fontFamily</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sans-serif<span class="token punctuation">"</span></span> <span class="token attr-name">fontSize</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">16</span><span class="token punctuation">}</span></span> <span class="token attr-name">lineHeight</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>24px<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text"><br>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Block</span></span> <span class="token attr-name">fontWeight</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">600</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">Просто</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Block</span></span><span class="token punctuation">></span></span><span class="token plain-text"><br>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Block</span></span> <span class="token attr-name">fontStyle</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>italic<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">Разработка</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Block</span></span><span class="token punctuation">></span></span><span class="token plain-text"><br>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Col</span></span><span class="token punctuation">></span></span><span class="token plain-text"><br></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Row</span></span><span class="token punctuation">></span></span></code></pre>
<p>Ну и свои компоненты уже создаются на их базе:</p>
<pre class="language-jsx"><code class="language-jsx"><span class="token keyword">const</span> <span class="token function-variable function">RedBlock</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Block</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token punctuation">...</span><span class="token attr-value">props</span><span class="token punctuation">}</span></span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>red<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span></code></pre>
<p>Чтобы указать имя тега, впрочем, тоже нужно передать свойство – <code>component</code>. Минусы всё те же, что у JSS: нужно запоминать громоздкий выдуманный API, стили лезут в логику.</p>
<h3>Radium</h3>
<p>2014-2016 года выдались щедрыми на различные новые подходы. Вот и <a href="https://github.com/FormidableLabs/radium" target="_blank">Radium</a> не отставал. Что они сделали? Они переопределили атрибут style таким образом, чтобы он принимал на вход массив. Вы передаёте в него наборы стилей, а они – применяются в строгом порядке:</p>
<pre class="language-jsx"><code class="language-jsx"><span class="token keyword">const</span> styles <span class="token operator">=</span> <span class="token punctuation">{</span><br>  base<span class="token operator">:</span> <span class="token punctuation">{</span><br>    background<span class="token operator">:</span> <span class="token string">'blue'</span><span class="token punctuation">,</span><br>    borderRadius<span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span><br>    color<span class="token operator">:</span> <span class="token string">'white'</span><span class="token punctuation">,</span><br>    <span class="token string">':hover'</span><span class="token operator">:</span> <span class="token punctuation">{</span><br>      backgroundColor<span class="token operator">:</span> <span class="token string">'red'</span><span class="token punctuation">,</span><br>    <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  block<span class="token operator">:</span> <span class="token punctuation">{</span><br>    display<span class="token operator">:</span> <span class="token string">'block'</span><span class="token punctuation">,</span><br>    <span class="token string">'@media (min-width: 320px)'</span><span class="token operator">:</span> <span class="token punctuation">{</span><br>      width<span class="token operator">:</span> <span class="token string">'100%'</span><span class="token punctuation">,</span><br>    <span class="token punctuation">}</span><span class="token punctuation">,</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br><span class="token punctuation">}</span><span class="token punctuation">;</span><br><br><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">HelloRadiumButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>  <span class="token keyword">return</span> <span class="token punctuation">(</span><br>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">[</span>styles<span class="token punctuation">.</span>base<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>block <span class="token operator">&amp;&amp;</span> styles<span class="token punctuation">.</span>block<span class="token punctuation">]</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text"><br>      </span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>children<span class="token punctuation">}</span><span class="token plain-text"><br>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><br>  <span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token punctuation">}</span></code></pre>
<p>Я намеренно не показываю более сложные примеры, это в общем не имеет смысла. Тем более проект Radium официально закрыт. Хотя всё же покажу один. Используя метод <code>Radium.getState</code> можно создать новый элемент основываясь на стиле другого. Например, создать и показать подсказку при наведении на кнопку:</p>
<pre class="language-jsx"><code class="language-jsx"><span class="token keyword">return</span> <span class="token punctuation">(</span><br>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text"><br>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>keyForButton<span class="token punctuation">"</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">[</span>styles<span class="token punctuation">.</span>button<span class="token punctuation">]</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text"><br>      Hover me!<br>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text"><br>    </span><span class="token punctuation">{</span>Radium<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">,</span> <span class="token string">'keyForButton'</span><span class="token punctuation">,</span> <span class="token string">':hover'</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span><br>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token plain-text"> Hovering!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><br>    <span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">}</span><span class="token plain-text"><br>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><br><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>Надо только не забыть создать определение стилей для <code>:hover</code>, даже пустое.</p>
<h3>Styled Components</h3>
<p>В разделе о JSS я уже заикнулся о теговых шаблонах. Посмотрите вот на это:</p>
<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> Button <span class="token operator">=</span> styled<span class="token punctuation">.</span>button<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"><br>  background-color: papayawhip;<br>  border-radius: 3px;<br>  color: palevioletred;<br></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span></code></pre>
<p>Если вы прочитали документацию по теговым шаблонам, вы уже в курсе, что код выше – это вполне себе стандарт языка. Мы вызываем функцию, на вход которой подаём строку. И эта строка у нас в примере – некоторый набор CSS-правил, которые можно разобрать и получить те же объекты с правилами, что и в других решениях, после чего выдать имя класса.</p>
<p>Казалось бы, на этом можно остановиться, но создатели <a href="https://github.com/styled-components/styled-components" target="_blank">Styled Components</a> решили пойти дальше. Они решили из каждой такой записи генерировать новый компонент. Само название уже на это намекает. Идея проще некуда, но последствия неоценимы.</p>
<p>Да, вы не ошиблись. Вот та вот короткая запись выше – это самый настоящий React-компонент, готовый к использованию. Он принимает на вход все поддерживаемые кнопками атрибуты HTML, даже <code>class</code> (<code>className</code>) и <code>style</code>. А раз это полноценный компонент, наверное и свойства (<code>props</code>) можно передать? Ну да, естественно:</p>
<pre class="language-jsx"><code class="language-jsx"><span class="token keyword">const</span> Button <span class="token operator">=</span> styled<span class="token punctuation">.</span>button<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"><br>  background-color: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=></span> props<span class="token punctuation">.</span>bgColor <span class="token operator">||</span> <span class="token string">'cyan'</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">;<br>  border-radius: 3px;<br>  color: lavender;<br></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><br><br><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">HelloStyledComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Button</span></span> <span class="token attr-name">bgColor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>red<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">Hello!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Button</span></span><span class="token punctuation">></span></span><span class="token punctuation">;</span><br><span class="token punctuation">}</span></code></pre>
<p>Вы уже, наверное, догадались, что ещё можно сделать, но я оставлю это на другой раз. Пока же важно знать, что Styled Components породили огромное число подражателей. Какие-то из них сильно быстрее SC, какие-то дают ещё больше возможностей и даже могут генерировать CSS-файлы во время сборки, убирая все возможные проблемы с производительностью на корню. Но SC всё ещё живы и процветают, вбирая в себя лучшие идеи.</p>
<h3>Хардкор напоследок</h3>
<p>Как я уже сказал, 2014-2016 года были щедры на идеи. Можно было даже на уровне транспилятора всё это решить. Встречайте, <a href="https://github.com/martinandert/babel-plugin-css-in-js" target="_blank">babel-plugin-css-in-js</a>. Распыляться не буду, смотрим. Вход:</p>
<pre class="language-jsx"><code class="language-jsx"><span class="token keyword">const</span> styles <span class="token operator">=</span> <span class="token function">cssInJS</span><span class="token punctuation">(</span><span class="token punctuation">{</span><br>  button<span class="token operator">:</span> <span class="token punctuation">{</span><br>    padding<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span><br>    backgroundColor<span class="token operator">:</span> <span class="token string">'blue'</span><span class="token punctuation">,</span><br>  <span class="token punctuation">}</span><span class="token punctuation">,</span><br><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><br><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Button</span></span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>button<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span></code></pre>
<p>Выход, JavaScript:</p>
<pre class="language-jsx"><code class="language-jsx"><span class="token keyword">const</span> styles <span class="token operator">=</span> <span class="token punctuation">{</span><br>  button<span class="token operator">:</span> <span class="token string">'example_js_styles_button'</span><span class="token punctuation">,</span><br><span class="token punctuation">}</span><span class="token punctuation">;</span><br><br><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Button</span></span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>button<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span></code></pre>
<p>CSS:</p>
<pre class="language-css"><code class="language-css"><span class="token selector">.example_js_styles_button</span> <span class="token punctuation">{</span><br>  <span class="token property">padding</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span><br>  <span class="token property">background-color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span><br><span class="token punctuation">}</span></code></pre>
<p>Самое прекрасное, это всё происходит на этапе сборки и попадает в отдельный файл. Без накладных расходов. Штука интересная, но никаких динамических возможностей не предоставляет.</p>
<h2>Итого</h2>
<p>Как видим, существует множество CSS-in-JS фреймворков и библиотек, но лишь одна из них, благодаря своей потрясающе простой идее, создала вокруг себя некий культ. И это – Styled Components. Вся идея укладывается в названии, а число подражателей и последователей – весьма велико: <a href="https://emotion.sh/" target="_blank">Emotion</a>, <a href="https://github.com/4Catalyzer/astroturf" target="_blank">astroturf</a>, <a href="https://linaria.dev/" target="_blank">linaria</a>. В следующей статье познакомимся со Styled Components поближе.</p>

    ]]>
      </content>
    </entry>
  
    
    <entry>
      <title>Введение в Styled Components</title>
      <link href="https://htmlshit.site/blog/styled-components/"/>
      <updated>2021-03-20T00:00:00Z</updated>
      <id>https://htmlshit.site/blog/styled-components/</id>
      <content type="html">
        <![CDATA[
      <p>Итак, <a href="https://www.styled-components.com/">Styled Components</a>. Буквально – стилизованные компоненты. Собственно, в этом вся суть и статью можно завершать.</p>
<p>Шучу. Продолжаем.</p>
<h2>TL;DR</h2>
<pre class="language-jsx"><code class="language-jsx"><span class="token keyword">const</span> sharedText <span class="token operator">=</span> css<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"><br>  color: white;<br>  margin: 1rem;<br></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><br><br><span class="token keyword">const</span> Title <span class="token operator">=</span> styled<span class="token punctuation">.</span>h1<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"><br>  </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>sharedText<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">;<br>  font-size: 2rem;<br></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><br><br><span class="token keyword">const</span> Text <span class="token operator">=</span> styled<span class="token punctuation">.</span>p<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"><br>  </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>sharedText<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">;<br>  font-size: 1rem;<br></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><br><br><span class="token keyword">const</span> TextBase <span class="token operator">=</span> styled<span class="token punctuation">.</span>p<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"><br>  font-size: 1rem;<br>  text-align: center;<br></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><br><br><span class="token keyword">const</span> BlueText <span class="token operator">=</span> <span class="token function">styled</span><span class="token punctuation">(</span>TextBase<span class="token punctuation">)</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"><br>  color: blue;<br></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><br><br><span class="token keyword">const</span> PinkText <span class="token operator">=</span> <span class="token function">styled</span><span class="token punctuation">(</span>TextBase<span class="token punctuation">)</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"><br>  color: pink;<br></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><br><br><span class="token keyword">const</span> Container <span class="token operator">=</span> styled<span class="token punctuation">.</span>div<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"><br>  margin: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> isLarge <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>isLarge <span class="token operator">?</span> <span class="token string">'5rem'</span> <span class="token operator">:</span> <span class="token string">'1rem'</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">;<br></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><br><br><span class="token keyword">const</span> TextBase <span class="token operator">=</span> styled<span class="token punctuation">.</span>p<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"><br>  font-size: 1rem;<br>  text-align: center;<br>  color: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=></span> props<span class="token punctuation">.</span>color<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">;<br></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><br><br><span class="token keyword">const</span> <span class="token function-variable function">MyComponent</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>  <span class="token keyword">return</span> <span class="token punctuation">(</span><br>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Container</span></span> <span class="token attr-name">isLarge</span><span class="token punctuation">></span></span><span class="token plain-text"><br>      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">TextBase</span></span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#0000FF<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">I'm Blue</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">TextBase</span></span><span class="token punctuation">></span></span><span class="token plain-text"><br>      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">TextBase</span></span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pink<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">I'm Pink</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">TextBase</span></span><span class="token punctuation">></span></span><span class="token plain-text"><br>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Container</span></span><span class="token punctuation">></span></span><br>  <span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
<h2>Поехали</h2>
<p>Давайте напишем простенький React-компонент, для упрощения процесса я буду использовать SCSS (<em>ведь его все любят</em>):</p>
<pre class="language-scss"><code class="language-scss"><span class="token selector">.hello </span><span class="token punctuation">{</span><br>  <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span><br>  <span class="token property">background-color</span><span class="token punctuation">:</span> cyan<span class="token punctuation">;</span><br><br>  <span class="token selector"><span class="token parent important">&amp;</span>:hover </span><span class="token punctuation">{</span><br>    <span class="token property">background-color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span><br>  <span class="token punctuation">}</span><br><span class="token punctuation">}</span></code></pre>
<p>И JSX:</p>
<pre class="language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">HelloClassNameComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hello<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">Hello Class Name!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">;</span><br><span class="token punctuation">}</span></code></pre>
<p>Теперь то же самое, но при помощи Styled Components:</p>
<pre class="language-jsx"><code class="language-jsx"><span class="token keyword">import</span> styled <span class="token keyword">from</span> <span class="token string">'styled-components'</span><span class="token punctuation">;</span><br><br><span class="token keyword">const</span> Div <span class="token operator">=</span> styled<span class="token punctuation">.</span>div<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"><br>  color: white;<br>  background-color: red;<br><br>  &amp;:hover {<br>    background-color: black;<br>  }<br></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><br><br><span class="token keyword">function</span> <span class="token function">HelloStyledComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Div</span></span><span class="token punctuation">></span></span><span class="token plain-text">Hello Styled!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Div</span></span><span class="token punctuation">></span></span><span class="token punctuation">;</span><br><span class="token punctuation">}</span></code></pre>
<p><small>Сразу видна проблема с подсветкой кода, но это уже по моей вине: я пока не очень разобрался с настройками <a href="https://prismjs.com/">Prism</a> в <a href="https://www.11ty.dev/">Eleventy</a>. Просто имейте это в виду.</small></p>
<p>Выглядит весьма похоже. Используя свежие фишки JavaScript под названием <a href="https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/template_strings">шаблонные строки</a> и <a href="https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/template_strings#%D1%82%D0%B5%D0%B3%D0%BE%D0%B2%D1%8B%D0%B5_%D1%88%D0%B0%D0%B1%D0%BB%D0%BE%D0%BD%D1%8B">теговые шаблоны</a> Styled Components буквально позволяет писать привычный CSS прямо в JS-модулях и таким образом теперь ваш компонент целиком и полностью отвечает не только за свою структуру и визуальную логику, но и за внешнее оформление тоже.</p>
<p>И привычный и такой любимый родительский селектор (&amp;, амперсанд) имеется.</p>
<h3>Песочница</h3>
<p>Установка и настройка Styled Components будет описана в следующей статье цикла, поскольку нюансов и фишек слишком много. Здесь я познакомлю вас с синтаксисом и основными приёмами работы. Чтобы было проще стартовать, я подготовил песочницу на <a href="https://codesandbox.io/s/competent-noether-21coi?file=/src/App.js">CodeSandbox</a>, в рамках которой можно просто запускать код из статьи. Да, я ленивый: остальные примеры будут даны просто текстом.</p>
<iframe src="https://codesandbox.io/embed/competent-noether-21coi?fontsize=14&hidenavigation=1&moduleview=1&theme=dark"
     style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"
     title="competent-noether-21coi"
     allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"
     sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"
   ></iframe>
<h3>Прокидываем props'ы</h3>
<p>Продолжаем.</p>
<p>Одного только исчезновения <code>className</code> явно недостаточно чтобы набрать новых сторонников. Усложняем:</p>
<pre class="language-jsx"><code class="language-jsx"><span class="token keyword">import</span> styled <span class="token keyword">from</span> <span class="token string">'styled-components'</span><span class="token punctuation">;</span><br><br><span class="token keyword">const</span> Div <span class="token operator">=</span> styled<span class="token punctuation">.</span>div<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"><br>  color: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=></span> props<span class="token punctuation">.</span>color <span class="token operator">||</span> <span class="token string">'white'</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">;<br>  background-color: cyan;<br><br>  &amp;:hover {<br>    background-color: black;<br>  }<br></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><br><br><span class="token keyword">function</span> <span class="token function">HelloStyledComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Div</span></span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>green<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">Hello Styled!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Div</span></span><span class="token punctuation">></span></span><span class="token punctuation">;</span><br><span class="token punctuation">}</span></code></pre>
<p>Что мы сделали? Мы передали цвет текста через свойства компонента (properties, props... <em>пробросили через пропсы</em>, в общем). Ничего не передаём – получаем красный, вот так просто. Теперь можно поступить вот так:</p>
<pre class="language-jsx"><code class="language-jsx"><span class="token keyword">const</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><br><br><span class="token keyword">function</span> <span class="token function">HelloPropsComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>  <span class="token keyword">return</span> <span class="token punctuation">(</span><br>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>article</span><span class="token punctuation">></span></span><span class="token plain-text"><br>      </span><span class="token punctuation">{</span>colors<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">color</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><br>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Div</span></span> <span class="token attr-name">color</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>color<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">Hello Styled!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Div</span></span><span class="token punctuation">></span></span><br>      <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text"><br>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>article</span><span class="token punctuation">></span></span><br>  <span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token punctuation">}</span></code></pre>
<p>Получим три компонента с разным цветом текста, но одинаковыми остальными свойствами и реакцией на наведение мыши. Чтобы повторить подобное на классическом CSS без привлечения сторонних инструментов, пришлось бы сначала определить классы для разных цветов, а после воспользоваться или библиотекой classnames или склеивать строки названий классов вручную:</p>
<pre class="language-scss"><code class="language-scss"><span class="token selector">.hello </span><span class="token punctuation">{</span><br>  <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span><br>  <span class="token property">background-color</span><span class="token punctuation">:</span> cyan<span class="token punctuation">;</span><br><br>  <span class="token selector"><span class="token parent important">&amp;</span>:hover </span><span class="token punctuation">{</span><br>    <span class="token property">background-color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span><br>  <span class="token punctuation">}</span><br><br>  <span class="token selector"><span class="token parent important">&amp;</span>--red </span><span class="token punctuation">{</span><br>    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><br>  <span class="token punctuation">}</span><br><br>  <span class="token selector"><span class="token parent important">&amp;</span>--green </span><span class="token punctuation">{</span><br>    <span class="token property">color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span><br>  <span class="token punctuation">}</span><br><br>  <span class="token selector"><span class="token parent important">&amp;</span>--blue </span><span class="token punctuation">{</span><br>    <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span><br>  <span class="token punctuation">}</span><br><span class="token punctuation">}</span></code></pre>
<pre class="language-jsx"><code class="language-jsx"><span class="token keyword">const</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><br><br><span class="token keyword">function</span> <span class="token function">HelloClassComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>  <span class="token keyword">return</span> <span class="token punctuation">(</span><br>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>article</span><span class="token punctuation">></span></span><span class="token plain-text"><br>      </span><span class="token punctuation">{</span>colors<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">color</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span><br>        <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">hello hello--</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>color<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">Hello Class Name!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">;</span><br>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text"><br>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>article</span><span class="token punctuation">></span></span><br>  <span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token punctuation">}</span></code></pre>
<p>Да, можно попробовать пользовательские свойства CSS (<em>переменные</em>, Custom Properties), будет гораздо гибче. Но при работе «в лоб» всё ещё достаточно неудобно.</p>
<p>Задаём свойство:</p>
<pre class="language-scss"><code class="language-scss"><span class="token selector">.hello </span><span class="token punctuation">{</span><br>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--color<span class="token punctuation">)</span><span class="token punctuation">;</span><br>  <span class="token property">background-color</span><span class="token punctuation">:</span> cyan<span class="token punctuation">;</span><br><br>  <span class="token selector"><span class="token parent important">&amp;</span>:hover </span><span class="token punctuation">{</span><br>    <span class="token property">background-color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span><br>  <span class="token punctuation">}</span><br><span class="token punctuation">}</span></code></pre>
<p>И меняем в нужный нам момент:</p>
<pre class="language-jsx"><code class="language-jsx"><span class="token keyword">const</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><br><br><span class="token keyword">function</span> <span class="token function">HelloVarComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>  <span class="token keyword">return</span> <span class="token punctuation">(</span><br>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>article</span><span class="token punctuation">></span></span><span class="token plain-text"><br>      </span><span class="token punctuation">{</span>colors<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">color</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span><br>        <span class="token keyword">const</span> colorStyle <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">'--color'</span><span class="token operator">:</span> color <span class="token punctuation">}</span><span class="token punctuation">;</span><br><br>        <span class="token keyword">return</span> <span class="token punctuation">(</span><br>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hello<span class="token punctuation">"</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>colorStyle<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text"><br>            Hello Custom Properties!<br>          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><br>        <span class="token punctuation">)</span><span class="token punctuation">;</span><br>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text"><br>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>article</span><span class="token punctuation">></span></span><br>  <span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token punctuation">}</span></code></pre>
<p>Впрочем, в комбинации со Styled Components пользовательские свойства могут раскрыться в полной мере и дать неограниченный простор для темизации.</p>
<p>Чтобы не навлечь на себя гнев апологетов CSS-подхода я сразу должен отметить: написанный вручную CSS изначально является более эффективным. Styled Components (и Emotion, например) не умеют объединять похожие классы самостоятельно. Т. е. на каждый <code>div</code> будет сгенерирован свой класс, с одинаковым фоном и <code>:hover</code>-ом. Кто-то вполне имеет право поморщиться от такого подхода.</p>
<p>Но это автоматизируется и давайте будем честны: в CSS мы всё же создали три разных класса, а в SC – нет. И это можно будет исправить, расскажу чуть далее.</p>
<h3>Переиспользование и css``</h3>
<p>Ладно одно свойство, а если у вас их с десяток? А если вам поддержка темизации нужна? А если это свойство должно полностью преобразить компонент? Разным ситуациям – разный внешний вид по переданному одному лишь параметру. Введём ещё одну функцию, css.</p>
<p>Название говорит само за себя:</p>
<pre class="language-jsx"><code class="language-jsx"><span class="token keyword">import</span> styled<span class="token punctuation">,</span> <span class="token punctuation">{</span> css <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'styled-components'</span><span class="token punctuation">;</span><br><br><span class="token keyword">const</span> flexStyles <span class="token operator">=</span> css<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"><br>  display: flex;<br>  flex-direction: column;<br>  align-items: space-around;<br>  justify-content: center;<br>  color: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> color <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> color <span class="token operator">||</span> <span class="token string">'red'</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">;<br></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><br><br><span class="token keyword">const</span> blockStyles <span class="token operator">=</span> css<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"><br>  display: block;<br></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><br><br><span class="token keyword">const</span> Div <span class="token operator">=</span> styled<span class="token punctuation">.</span>div<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"><br>  </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> isAlt <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span><br>    isAlt <span class="token operator">?</span> blockStyles <span class="token operator">:</span> flexStyles<span class="token punctuation">;</span><br>  <span class="token punctuation">}</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"><br></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><br><br><span class="token keyword">function</span> <span class="token function">HelloCssComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>  <span class="token keyword">return</span> <span class="token punctuation">(</span><br>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Div</span></span> <span class="token attr-name">isAlt</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>green<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text"><br>      Hello Styled!<br>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Div</span></span><span class="token punctuation">></span></span><br>  <span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token punctuation">}</span></code></pre>
<p>Мы получили независимый переиспользуемый блок стилей и вынесли описание представления за пределы минимальной, но всё же логики блока. И таких комбинаций свойств и стилей может быть множество даже в пределах одного элемента. А ещё можно и просто вот так:</p>
<pre class="language-jsx"><code class="language-jsx"><span class="token keyword">const</span> sharedStyles <span class="token operator">=</span> css<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"><br>  color: white;<br>  margin: 1rem;<br></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><br><br><span class="token keyword">const</span> Title <span class="token operator">=</span> styled<span class="token punctuation">.</span>h1<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"><br>  </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>sharedStyles<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">;<br>  font-size: 2rem;<br></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><br><br><span class="token keyword">const</span> Text <span class="token operator">=</span> styled<span class="token punctuation">.</span>p<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"><br>  </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>sharedStyles<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">;<br>  font-size: 1rem;<br></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span></code></pre>
<p>Конструкция, напомню, называется теговым шаблоном. Я писал выше, что библиотека Styled Components на них основана. Сама директива styled – фабрика этих самых теговых шаблонов и это первая подсказка к самой крутой фишке библиотеки.</p>
<h3>Адаптивная вёрстка и media``</h3>
<p>Как и в SCSS, вы просто описываете все правила непосредственно в описании стилизованного компонента:</p>
<pre class="language-jsx"><code class="language-jsx"><span class="token keyword">import</span> styled <span class="token keyword">from</span> <span class="token string">'styled-components'</span><span class="token punctuation">;</span><br><br><span class="token keyword">const</span> size <span class="token operator">=</span> <span class="token punctuation">{</span><br>  mobileS<span class="token operator">:</span> <span class="token string">'320px'</span><span class="token punctuation">,</span><br>  mobileM<span class="token operator">:</span> <span class="token string">'375px'</span><span class="token punctuation">,</span><br>  mobileL<span class="token operator">:</span> <span class="token string">'425px'</span><span class="token punctuation">,</span><br>  tablet<span class="token operator">:</span> <span class="token string">'768px'</span><span class="token punctuation">,</span><br>  laptop<span class="token operator">:</span> <span class="token string">'1024px'</span><span class="token punctuation">,</span><br>  laptopL<span class="token operator">:</span> <span class="token string">'1440px'</span><span class="token punctuation">,</span><br>  desktop<span class="token operator">:</span> <span class="token string">'2560px'</span><span class="token punctuation">,</span><br><span class="token punctuation">}</span><span class="token punctuation">;</span><br><br><span class="token keyword">const</span> device <span class="token operator">=</span> <span class="token punctuation">{</span><br>  mobileS<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">(min-width: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>size<span class="token punctuation">.</span>mobileS<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span><br>  mobileM<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">(min-width: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>size<span class="token punctuation">.</span>mobileM<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span><br>  mobileL<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">(min-width: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>size<span class="token punctuation">.</span>mobileL<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span><br>  tablet<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">(min-width: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>size<span class="token punctuation">.</span>tablet<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span><br>  laptop<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">(min-width: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>size<span class="token punctuation">.</span>laptop<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span><br>  laptopL<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">(min-width: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>size<span class="token punctuation">.</span>laptopL<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span><br>  desktop<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">(min-width: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>size<span class="token punctuation">.</span>desktop<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span><br>  desktopL<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">(min-width: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>size<span class="token punctuation">.</span>desktop<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span><br><span class="token punctuation">}</span><span class="token punctuation">;</span><br><br><span class="token keyword">const</span> Div <span class="token operator">=</span> styled<span class="token punctuation">.</span>div<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"><br>  color: white;<br>  background-color: red;<br><br>  &amp;:hover {<br>    background-color: black;<br>  }<br><br>  @media </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>device<span class="token punctuation">.</span>mobileS<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> {<br>    color: green;<br>  }<br></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><br><br><span class="token keyword">function</span> <span class="token function">HelloMediaComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Div</span></span><span class="token punctuation">></span></span><span class="token plain-text">Hello Media!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Div</span></span><span class="token punctuation">></span></span><span class="token punctuation">;</span><br><span class="token punctuation">}</span></code></pre>
<p>Мы создали говорящие за себя константы со списками разрешений экранов и определили под них устройства. Они могут быть экспортированы из любого места в проекте и, соответственно, использованы где угодно. Теперь вы знаете достаточно чтобы начать применять SC в реальных проектах.</p>
<h3>Композиция</h3>
<p>«Подожди, дядя, – скажете вы. – У нас тут в CSS есть композиция классов, а с SCSS это вообще в культ возведено и композицию классов мы определяем вложенностью. Амперсанд наше всё!», – и будете правы в своём вопросе. Но, кажется, вы забыли, что цель CSS-in-JS в итоге – создать всё те же классы. И вот здесь, внезапно, композиция классов на наших глазах превращается в композицию компонентов:</p>
<pre class="language-jsx"><code class="language-jsx"><span class="token keyword">import</span> styled <span class="token keyword">from</span> <span class="token string">'styled-components'</span><span class="token punctuation">;</span><br><span class="token keyword">import</span> icon <span class="token keyword">from</span> <span class="token string">'./icon.png'</span><span class="token punctuation">;</span><br><br><span class="token keyword">const</span> Icon <span class="token operator">=</span> styled<span class="token punctuation">.</span>i<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"><br>  display: block;<br>  width: 16px;<br>  height: 16px;<br>  background: trasnsparent url(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>icon<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">) center/contain no-repeat;<br></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><br><br><span class="token keyword">const</span> Button <span class="token operator">=</span> styled<span class="token punctuation">.</span>button<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"><br>  background: none;<br>  border: 1px cyan solid;<br><br>  </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>Icon<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> {<br>    display: inline-block;<br>    width: 12px;<br>    height: 12px;<br>  }<br></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span></code></pre>
<p>Можете прийти в <a href="https://t.me/htmlshitchat">@htmlshitchat</a> и рассказать мне про использование тега i для иконки, но... суть в том, что мы получили такую желанную и привычную композицию классов, да ещё и в виде всеми любимой вложенности. Родительский селектор тоже работает как надо:</p>
<pre class="language-jsx"><code class="language-jsx"><span class="token keyword">import</span> styled <span class="token keyword">from</span> <span class="token string">'styled-components'</span><span class="token punctuation">;</span><br><span class="token keyword">import</span> <span class="token punctuation">{</span>Menu<span class="token punctuation">}</span> <span class="token keyword">from</span> ‘<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>Menu’<span class="token punctuation">;</span><br><span class="token keyword">import</span> <span class="token punctuation">{</span>Dropdown<span class="token punctuation">}</span> <span class="token keyword">from</span> ‘<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>Dropdown’<span class="token punctuation">;</span><br><br><span class="token keyword">const</span> Button <span class="token operator">=</span> styled<span class="token punctuation">.</span>button<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"><br>  border: 1px solid darkgreen;<br>  background: darkkhaki;<br><br>  </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>Menu<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> &amp; {<br>    border: none;<br>    background: transparent;<br>  }<br><br>  </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>Dropdown<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> &amp; {<br>    text-indent: -9999px;<br><br>    &amp;::after {<br>      // create some arrow maybe<br>    }<br>}</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span></code></pre>
<p>Что произошло? Мы использовали родительский селектор (в нашем случае компонент, Button) и заставили его выглядеть иначе при использовании внутри компонентов Menu и Dropdown. Вот так вот просто.</p>
<p>Вот только я сразу хочу предупредить, что так пишут довольно редко: это нарушает принцип единственной ответственности (насколько он вообще применим для компонентов). Гораздо чаще делают следующее:</p>
<pre class="language-jsx"><code class="language-jsx"><span class="token keyword">import</span> styled <span class="token keyword">from</span> <span class="token string">'styled-components'</span><span class="token punctuation">;</span><br><span class="token keyword">import</span> Icon <span class="token keyword">from</span> <span class="token string">'@/ui/Icon'</span><span class="token punctuation">;</span><br><br><span class="token keyword">const</span> ButtonIcon <span class="token operator">=</span> <span class="token function">styled</span><span class="token punctuation">(</span>Icon<span class="token punctuation">)</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"><br>  display: inline-block;<br>  width: 12px;<br>  height: 12px;<br></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span></code></pre>
<p>То есть мы просто передаём в styled ваш компонент в качестве аргумента и получаем теговый шаблон, который генерирует новый класс на основе уже существующего класса, принадлежащего стилизуемому элементу, и новых передаваемых стилей. <em>Магическим</em> образом рождается новый компонент. Мне кажется, на этом месте у самых внимательных должна щёлкнуть в голове весьма очевидная идея: «Раз Styled Components заведует классами, можно ли подмешать их к обычным компонентам?».</p>
<p>И ответ – да!</p>
<p>До тех пор пока ваши компоненты могут принимать класс (className) через переданные свойства (props) – SC может собрать композицию! В таком случае я придерживаюсь именования из документации: добавляю префикс <code>Styled</code> к имени компонента. Это позволяет избежать любых неоднозначностей и сложностей в именовании.</p>
<p>Следующий пример взят из <a href="https://styled-components.com/docs/basics#styling-any-component">документации</a> с изменениями. Я вообще крайне рекомендую её прочесть, если владеете английским. Интерактивные примеры там – шик, пройдите и попробуйте.</p>
<pre class="language-jsx"><code class="language-jsx"><span class="token keyword">import</span> styled <span class="token keyword">from</span> <span class="token string">"styled-components"</span><span class="token punctuation">;</span><br><br><span class="token keyword">const</span> <span class="token function-variable function">Link</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> className<span class="token punctuation">,</span> children <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><br>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/<span class="token punctuation">"</span></span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>className<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text"><br>    </span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token plain-text"><br>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><br><span class="token punctuation">)</span><span class="token punctuation">;</span><br><br><span class="token keyword">const</span> StyledLink <span class="token operator">=</span> <span class="token function">styled</span><span class="token punctuation">(</span>Link<span class="token punctuation">)</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"><br>  color: palevioletred;<br>  font-weight: bold;<br></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><br><br><span class="token keyword">const</span> Styled2Link <span class="token operator">=</span> <span class="token function">styled</span><span class="token punctuation">(</span>StyledLink<span class="token punctuation">)</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"><br>  color: red;<br></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><br><br><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>  <span class="token keyword">return</span> <span class="token punctuation">(</span><br>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text"><br>      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Link</span></span><span class="token punctuation">></span></span><span class="token plain-text">Unstyled, boring Link</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Link</span></span><span class="token punctuation">></span></span><span class="token plain-text"><br>      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token plain-text"><br>      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">StyledLink</span></span><span class="token punctuation">></span></span><span class="token plain-text">Styled, exciting Link</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">StyledLink</span></span><span class="token punctuation">></span></span><span class="token plain-text"><br>      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token plain-text"><br>      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Styled2Link</span></span><span class="token punctuation">></span></span><span class="token plain-text">Styled, exciting Link 2</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Styled2Link</span></span><span class="token punctuation">></span></span><span class="token plain-text"><br>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><br>  <span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token punctuation">}</span></code></pre>
<p>И вот теперь обратите внимание. Помните я сказал, что Styled Components из коробки не умеет объединять ваши CSS-правила? Так вот в данном примере вы, фактически, объединили их сами. Как и в классическом подходе:</p>
<p><img src="/images/classes.png" alt="Генерация классов" title="Генерация классов"></p>
<h3>Магия</h3>
<p>Напоследок немного обещанной магии. Возьмём популярный фреймворк <a href="https://material-ui.com/">Material UI</a> и <a href="https://codesandbox.io/s/broken-wave-24je9">обратим его на свою сторону</a>. Компоненты MUI принимают классы? Значит, принимают и правила SC.</p>
<iframe src="https://codesandbox.io/embed/broken-wave-24je9?fontsize=14&hidenavigation=1&moduleview=1&theme=dark"
     style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"
     title="broken-wave-24je9"
     allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"
     sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"
   ></iframe>
<p>Есть только одна хитрая проблема. Вы же не забыли, что правила CSS применяются по-порядку? Нам нужно быть уверенными, что стили SC загрузятся <strong>после</strong> стилей JSS (который применяется в MUI по-умолчанию). Вот для этого и нужен провайдер контекста стилей <code>StylesProvider</code>. Он гарантирует, что правила JSS будут загружены первыми. А SC, соответственно, уже после них. Ну ещё есть хак с &amp;&amp;. Догадайтесь уже сами, что он сделает.</p>
<h2>Полезно и познавательно</h2>
<p>На этом наш краткий экскурс в Styled Components закончен. В следующих статьях я разберу установку, работу с анимациями, темами и Typescript. А пока рекомендую ознакомиться со следующими ресурсами:</p>
<ul>
<li><a href="https://styled-components.com/">https://styled-components.com/</a></li>
<li><a href="https://emotion.sh/">https://emotion.sh/</a></li>
<li><a href="https://compiledcssinjs.com/">https://compiledcssinjs.com/</a></li>
<li><a href="https://linaria.dev/">https://linaria.dev/</a></li>
<li><a href="https://www.joshwcomeau.com/css/styled-components/">https://www.joshwcomeau.com/css/styled-components/</a></li>
<li><a href="https://medium.com/swlh/creating-react-styled-components-with-dynamic-tags-and-props-ef965c839e64">https://medium.com/swlh/creating-react-styled-components-with-dynamic-tags-and-props-ef965c839e64</a></li>
<li><a href="https://www.reddit.com/r/reactjs/comments/l4o5k5/the_styledcomponents_happy_path/">https://www.reddit.com/r/reactjs/comments/l4o5k5/the_styledcomponents_happy_path/</a></li>
<li><a href="https://jsramblings.com/how-to-use-media-queries-with-styled-components/">https://jsramblings.com/how-to-use-media-queries-with-styled-components/</a></li>
<li><a href="https://mxstbr.blog/2016/11/styled-components-magic-explained/">https://mxstbr.blog/2016/11/styled-components-magic-explained/</a></li>
</ul>

    ]]>
      </content>
    </entry>
  
</feed>
