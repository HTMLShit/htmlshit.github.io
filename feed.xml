<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>@htmlshit</title>
  <subtitle></subtitle>
  <link href="https://t.me/htmlshit/feed.xml" rel="self"/>
  <link href="https://t.me/htmlshit/"/>
  <updated>2021-01-19T00:00:00Z</updated>
  <id>https://t.me/htmlshit</id>
  <author>
    <name>Sergey Bekharsky</name>
  </author>
  
    
    <entry>
      <title>Styled Components</title>
      <link href="https://t.me/htmlshit/blog/styled-components/"/>
      <updated>2021-01-19T00:00:00Z</updated>
      <id>https://t.me/htmlshit/blog/styled-components/</id>
      <content type="html">
        <![CDATA[
      <h2>Пролог</h2>
<p>Сразу задам тон повествования: я предполагаю, что с JavaScript и React вы уже знакомы и мне не придётся убеждать кого-либо в том, что JSX есть хорошо, а компонентный подход – удобно. Вам сейчас придётся не только принять, что HTML в JS это хорошо, но и что CSS в JS, как минимум, не плохо.</p>
<p>Итак, <a href="https://www.styled-components.com/">Styled Components</a>. Буквально – стилизованные компоненты. Собственно, в этом вся суть и статью можно завершать.</p>
<p>Шучу. Продолжаем.</p>
<h2>TLDR</h2>
<pre class="language-jsx"><code class="language-jsx"><span class="token keyword">const</span> sharedText <span class="token operator">=</span> css<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"><br>  color: white;<br>  margin: 1rem;<br></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><br><br><span class="token keyword">const</span> Title <span class="token operator">=</span> styled<span class="token punctuation">.</span>h1<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"><br>  </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>sharedText<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">;<br>  font-size: 2rem;<br></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><br><br><span class="token keyword">const</span> Text<span class="token operator">=</span> styled<span class="token punctuation">.</span>p<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"><br>  </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>sharedText<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">;<br>  font-size: 1rem;<br></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><br><br><span class="token keyword">const</span> TextBase <span class="token operator">=</span> styled<span class="token punctuation">.</span>p<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"><br>  font-size: 1rem;<br>  text-align: center;<br></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><br><br><span class="token keyword">const</span> BlueText <span class="token operator">=</span> <span class="token function">styled</span><span class="token punctuation">(</span>TextBase<span class="token punctuation">)</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"><br>  font-color: blue;<br></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><br><br><span class="token keyword">const</span> PinkText <span class="token operator">=</span> <span class="token function">styled</span><span class="token punctuation">(</span>TextBase<span class="token punctuation">)</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"><br>    font-color: pink;<br></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><br><br><span class="token keyword">const</span> Container <span class="token operator">=</span> styled<span class="token punctuation">.</span>div<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"><br>   margin: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token parameter">props</span> <span class="token operator">=></span> props<span class="token punctuation">.</span>large <span class="token operator">?</span> <span class="token string">'5rem'</span> <span class="token operator">:</span> <span class="token string">'1rem'</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">;<br></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><br><br><span class="token keyword">const</span> TextBase <span class="token operator">=</span> styled<span class="token punctuation">.</span>p<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"><br>   font-size: 1rem;<br>   text-align: center;<br>   font-color: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token parameter">props</span> <span class="token operator">=></span> props<span class="token punctuation">.</span>color<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">;<br></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><br><br><span class="token keyword">const</span> <span class="token function-variable function">MyComponent</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>  <span class="token keyword">return</span> <span class="token punctuation">(</span><br>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Container</span></span> <span class="token attr-name">large</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token boolean">true</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text"><br>      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">TextBase</span></span> <span class="token attr-name">color</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token string">'#0000FF'</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">I'm Blue</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">TextBase</span></span><span class="token punctuation">></span></span><span class="token plain-text"><br>      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">TextBase</span></span> <span class="token attr-name">color</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token string">'pink'</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">I'm Pink</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">TextBase</span></span><span class="token punctuation">></span></span><span class="token plain-text"><br>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Container</span></span><span class="token punctuation">></span></span><br>  <span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token punctuation">}</span></code></pre>
<h2>CSS-in-JS</h2>
<h3>Атрибут style</h3>
<p>Если вы сверстали хотя бы пару страниц в последние несколько лет, вы не могли не замечать аббревиатуру CSS-in-JS изо всех щелей. Старый добрый CSS, но написанный в JavaScript. Мы и раньше могли обращаться к стилям DOM-узлов через свойство style, считывая и устанавливая значение атрибута style связанного с узлом элемента.</p>
<pre class="language-javascript"><code class="language-javascript">el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">'white'</span><span class="token punctuation">;</span><br>el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token string">'cyan'</span><span class="token punctuation">;</span></code></pre>
<p>В итоге мы получаем генерированный атрибут style, который ещё называют инлайновыми стилями:</p>
<pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token style-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token style language-css"><span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span> <span class="token property">background-color</span><span class="token punctuation">:</span> red</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><br>  Hello Styles!<br><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>
<p>Минусы? Никаких вам псевдоклассов, никаких вам псевдоэлементов, никакой развитой анимации. Об отсутствии централизованного управления внешним видом множества элементов единовременно и объединения стилей (кажется, это худшая в мире ода CSS-классам). И с браузерным префиксами множество не относящихся к делу нюансов. Плюсы? Это бронебойно и точно работает (пока кто-нибудь !important не наставил).</p>
<h3>А что в React?</h3>
<p>В React (JSX) можно проделать практически то же самое, но чуть более изысканно:</p>
<pre class="language-jsx"><code class="language-jsx"><span class="token keyword">const</span> divStyle <span class="token operator">=</span> <span class="token punctuation">{</span><br>  color<span class="token operator">:</span> <span class="token string">'white'</span><span class="token punctuation">,</span><br>  backgroundColor<span class="token operator">:</span> <span class="token string">'cyan'</span><span class="token punctuation">,</span><br><span class="token punctuation">}</span><br><br><span class="token keyword">function</span> <span class="token function">HelloStylesComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>  <span class="token keyword">return</span> <span class="token punctuation">(</span><br>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>divStyle<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text"><br>      Hello React Styles!<br>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><br>  <span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token punctuation">}</span></code></pre>
<h3>CSS в JS</h3>
<p>Да, выглядит получше. Да, можно переиспользовать. Нет, остальное всё точно так же. Но этот раздел называется CSS-in-JS, а не просто Style-in-JS. Подход CSS-in-JS предполагает, что описанные вами стили – неважно, будут они реализованы на CSS-подобном языке или через JS-объекты – применятся к вашим элементам через динамические классы. Вы получаете всё, что имели в CSS, плюс динамические возможности JavaScript.</p>
<p>Плюсы:</p>
<ul>
<li>Соблюдается принцип единой ответственности: компонент полностью отвечает за свой внешний вид</li>
<li>Самоудаление &quot;мёртвого&quot; (неиспользуемого) кода</li>
<li>Динамические возможности ограничены лишь вашими умениями</li>
<li>Никаких проблем с именованием классов (вы же уже подумали об имени компонента, наверное)</li>
</ul>
<p>Минусы:</p>
<ul>
<li>Требуется некоторое время на привыкание (например, к синтаксису)</li>
<li>Лучшие возможности требуют дополнительной настройки сборки</li>
<li>Сложности с поддержкой редакторами кода (верно не всегда)</li>
<li>Стили не применятся, пока не выполнится JS (верно не всегда)</li>
<li>Производительность ниже, чем у классического подхода (верно не всегда)</li>
<li>Очевидно, стили кешироваться отдельно от скриптов не станут (верно не всегда)</li>
</ul>
<h3>Что в наличии?</h3>
<p>WIP ПРИМЕРЫ БИБЛИОТЕК</p>
<p>Как видим, существует множество CSS-in-JS фреймворков и библиотек, но лишь одна из них, благодаря своей потрясающе простой идее, создала вокруг себя некий культ. И это – Styled Components. Вся идея, как было сказано в прологе, укладывается в названии, а число подражателей и последователей – весьма велико: Emotion, astroturf, linaria ССЫЛКИ. Давайте просто попробуем.</p>
<h2>Styled Components</h2>
<p>Возьмём пример выше и превратим в классический React-компонент, для упрощения процесса я буду использовать SCSS (ведь все его любят):</p>
<pre class="language-scss"><code class="language-scss"><span class="token selector">.hello </span><span class="token punctuation">{</span><br>  <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span><br>  <span class="token property">background-color</span><span class="token punctuation">:</span> cyan<span class="token punctuation">;</span><br><br>  <span class="token selector"><span class="token parent important">&amp;</span>:hover </span><span class="token punctuation">{</span><br>    <span class="token property">background-color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span><br>  <span class="token punctuation">}</span><br><span class="token punctuation">}</span></code></pre>
<p>И сам компонент:</p>
<pre class="language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">HelloClassNameComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>  <span class="token keyword">return</span> <span class="token punctuation">(</span><br>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hello<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text"><br>      Hello Class Name!<br>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><br>  <span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token punctuation">}</span></code></pre>
<p>А теперь то же самое, но при помощи Styled Components (иногда далее – SC):</p>
<pre class="language-jsx"><code class="language-jsx"><span class="token keyword">import</span> styled <span class="token keyword">from</span> <span class="token string">'styled-components'</span><span class="token punctuation">;</span><br><br><span class="token keyword">const</span> Div <span class="token operator">=</span> styled<span class="token punctuation">.</span>div<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"><br>  color: white;<br>  background-color: red;<br><br>  &amp;:hover {<br>    background-color: black;<br>  }<br></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><br><br><span class="token keyword">function</span> <span class="token function">HelloStyledComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>  <span class="token keyword">return</span> <span class="token punctuation">(</span><br>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Div</span></span><span class="token punctuation">></span></span><span class="token plain-text"><br>      Hello Styled!<br>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Div</span></span><span class="token punctuation">></span></span><br>  <span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token punctuation">}</span></code></pre>
<p><small>Сразу видна проблема с подсветкой кода, но это уже по моей вине: я пока не очень разобрался с настройками <a href="https://prismjs.com/">Prism</a> в <a href="https://www.11ty.dev/">Eleventy</a>. Просто имейте это в виду.</small></p>
<p>Выглядит весьма похоже, не правда ли? Используя не так давно появившиеся фишки языка под названием <a href="https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/template_strings">шаблонные строки</a> и <a href="https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/template_strings#%D1%82%D0%B5%D0%B3%D0%BE%D0%B2%D1%8B%D0%B5_%D1%88%D0%B0%D0%B1%D0%BB%D0%BE%D0%BD%D1%8B">теговые шаблоны</a> Styled Components буквально позволяет писать привычный CSS прямо в JS-модулях и таким образом теперь ваш компонент целиком и полностью отвечает не только за свою структуру и визуальную логику, но и за внешнее оформление тоже (в разумных рамках, конечно). И привычный и такой любимый родительский селектор (&amp;, амперсанд) имеется, ниже рассмотрим.</p>
<h3>Прокидываем props'ы</h3>
<p>Пока напоминает всё тот же SCSS, не правда ли? Зато уже избавились от назойливого className. Давайте попробуем усложнить:</p>
<pre class="language-jsx"><code class="language-jsx"><span class="token keyword">import</span> styled <span class="token keyword">from</span> <span class="token string">'styled-components'</span><span class="token punctuation">;</span><br><br><span class="token keyword">const</span> Div <span class="token operator">=</span> styled<span class="token punctuation">.</span>div<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"><br>  color: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=></span> props<span class="token punctuation">.</span>color <span class="token operator">||</span> <span class="token string">'white'</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">;<br>  background-color: cyan;<br><br>  &amp;:hover {<br>    background-color: black;<br>  }<br></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><br><br><span class="token keyword">function</span> <span class="token function">HelloStyledComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>  <span class="token keyword">return</span> <span class="token punctuation">(</span><br>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Div</span></span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>green<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text"><br>      Hello Styled!<br>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Div</span></span><span class="token punctuation">></span></span><br>  <span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token punctuation">}</span></code></pre>
<p>Что мы сделали? Мы передали цвет текста через свойства компонента (properties, props... <em>пробросили через пропсы</em>, в общем). Ничего не передаём – получаем красный, вот так просто. Теперь можно, например, поступить вот так:</p>
<pre class="language-jsx"><code class="language-jsx"><span class="token keyword">const</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><br><br><span class="token keyword">function</span> <span class="token function">HelloPropsComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>  <span class="token keyword">return</span> <span class="token punctuation">(</span><br>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>article</span><span class="token punctuation">></span></span><span class="token plain-text"><br>      </span><span class="token punctuation">{</span>colors<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">color</span> <span class="token operator">=></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Div</span></span> <span class="token attr-name">color</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>color<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">Hello Styled!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Div</span></span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text"><br>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>article</span><span class="token punctuation">></span></span><br>  <span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token punctuation">}</span></code></pre>
<p>Получим три компонента с разным цветом текста, но одинаковыми остальными свойствами и реакцией на наведение мыши. Вся тяжёлая работа по генерации стилей и классов была выполнена библиотекой SC, обратите внимание на классы: общее вынесено в один, различающееся – в другие. Чтобы повторить подобное на классическом CSS пришлось бы сначала, как минимум, определить классы для разных цветов, а после воспользоваться или библиотекой classnames или склеивать строки названий классов вручную:</p>
<pre class="language-scss"><code class="language-scss"><span class="token selector">.hello </span><span class="token punctuation">{</span><br>  <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span><br>  <span class="token property">background-color</span><span class="token punctuation">:</span> cyan<span class="token punctuation">;</span><br><br>  <span class="token selector"><span class="token parent important">&amp;</span>:hover </span><span class="token punctuation">{</span><br>    <span class="token property">background-color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span><br>  <span class="token punctuation">}</span><br><span class="token punctuation">}</span><br><br><span class="token selector">.hello--red </span><span class="token punctuation">{</span><br>  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><br><span class="token punctuation">}</span><br><br><span class="token selector">.hello--green </span><span class="token punctuation">{</span><br>  <span class="token property">color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span><br><span class="token punctuation">}</span><br><br><span class="token selector">.hello--blue </span><span class="token punctuation">{</span><br>  <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span><br><span class="token punctuation">}</span></code></pre>
<pre class="language-jsx"><code class="language-jsx"><span class="token keyword">const</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><br><br><span class="token keyword">function</span> <span class="token function">HelloClassComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>  <span class="token keyword">return</span> <span class="token punctuation">(</span><br>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>article</span><span class="token punctuation">></span></span><span class="token plain-text"><br>      </span><span class="token punctuation">{</span>colors<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">color</span> <span class="token operator">=></span> <span class="token punctuation">{</span><br>        <span class="token keyword">return</span> <span class="token punctuation">(</span><br>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">hello hello--</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>color<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text"><br>            Hello Class Name!<br>          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><br>        <span class="token punctuation">)</span><span class="token punctuation">;</span><br>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text"><br>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>article</span><span class="token punctuation">></span></span><br>  <span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token punctuation">}</span></code></pre>
<p>Как-то не очень выразительно. Да, можно попробовать пользовательские свойства CSS (<em>переменные</em>, Custom Properties), будет гораздо гибче, но при работе &quot;в лоб&quot; всё ещё достаточно неудобно:</p>
<pre class="language-scss"><code class="language-scss"><span class="token selector">.hello </span><span class="token punctuation">{</span><br>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--color<span class="token punctuation">)</span><span class="token punctuation">;</span><br>  <span class="token property">background-color</span><span class="token punctuation">:</span> cyan<span class="token punctuation">;</span><br><br>  <span class="token selector"><span class="token parent important">&amp;</span>:hover </span><span class="token punctuation">{</span><br>    <span class="token property">background-color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span><br>  <span class="token punctuation">}</span><br><span class="token punctuation">}</span></code></pre>
<p>И изменим это свойство в нужный нам момент:</p>
<pre class="language-jsx"><code class="language-jsx"><span class="token keyword">const</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><br><br><span class="token keyword">function</span> <span class="token function">HelloVarComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>  <span class="token keyword">return</span> <span class="token punctuation">(</span><br>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>article</span><span class="token punctuation">></span></span><span class="token plain-text"><br>      </span><span class="token punctuation">{</span>colors<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">color</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span><br>        <span class="token keyword">const</span> colorStyle <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'--color'</span><span class="token operator">:</span> color<span class="token punctuation">}</span><span class="token punctuation">;</span><br><br>        <span class="token keyword">return</span> <span class="token punctuation">(</span><br>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hello<span class="token punctuation">"</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>colorStyle<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text"><br>            Hello Custom Properties!<br>          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><br>        <span class="token punctuation">)</span><span class="token punctuation">;</span><br>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text"><br>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>article</span><span class="token punctuation">></span></span><br>  <span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token punctuation">}</span></code></pre>
<p>Впрочем, в комбинации со Styled Components пользовательские свойства могут раскрыться в полной мере и дать неограниченный простор для темизации. Об этом чуть позже.</p>
<h3>Переиспользование и css``</h3>
<p>Ладно одно свойство, а если у вас их с десяток? А если вам поддержка темизации нужна? А если это свойство не просто должно определять значение правила, а переопределять стили едва ли не целиком? Разным ситуациям – разный внешний вид по переданному одному лишь свойству, разве это не прекрасно? Введём ещё одну функцию, помимо styled, css. Название говорит само за себя:</p>
<pre class="language-jsx"><code class="language-jsx"><span class="token keyword">import</span> styled<span class="token punctuation">,</span> <span class="token punctuation">{</span> css <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'styled-components'</span><span class="token punctuation">;</span><br><br><span class="token keyword">const</span> flexStyles <span class="token operator">=</span> css<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"><br>  display: flex;<br>  flex-direction: column;<br>  align-items: space-around;<br>  justify-content: center;<br>  color: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>color<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> color <span class="token operator">||</span> <span class="token string">'red'</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"><br></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><br><br><span class="token keyword">const</span> blockStyles <span class="token operator">=</span> css<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"><br>  display: block;<br></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><br><br><span class="token keyword">const</span> Div <span class="token operator">=</span> styled<span class="token punctuation">.</span>div<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"><br>  </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>isAlt<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span><br>    isAlt <span class="token operator">?</span> blockStyles <span class="token operator">:</span> flexStyles<span class="token punctuation">;</span><br>  <span class="token punctuation">}</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"><br></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><br><br><span class="token keyword">function</span> <span class="token function">HelloCssComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>  <span class="token keyword">return</span> <span class="token punctuation">(</span><br>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Div</span></span> <span class="token attr-name">isAlt</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>green<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text"><br>      Hello Styled!<br>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Div</span></span><span class="token punctuation">></span></span><br>  <span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token punctuation">}</span></code></pre>
<p>Мы не только получили независимый переиспользуемый блок стилей, но и вынесли описание представления за пределы минимальной, но всё же логики блока. И таких комбинаций свойств и стилей может быть множество даже в пределах одного элемента. А ещё можно и просто вот так:</p>
<pre class="language-jsx"><code class="language-jsx"><span class="token keyword">const</span> sharedText <span class="token operator">=</span> css<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"><br>  color: white;<br>  margin: 1rem;<br></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><br><br><span class="token keyword">const</span> Title <span class="token operator">=</span> styled<span class="token punctuation">.</span>h1<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"><br>  </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>sharedText<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">;<br>  font-size: 2rem;<br></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><br><br><span class="token keyword">const</span> Text<span class="token operator">=</span> styled<span class="token punctuation">.</span>p<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"><br>  </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>sharedText<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">;<br>  font-size: 1rem;<br></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span></code></pre>
<p>Конструкция, кстати, называется теговым шаблоном, я же писал выше, что библиотека Styled Components на них основана. Сама директива styled – тоже не что иное как фабрика этих самых теговых шаблонов. Если вы ещё не поняли, что это вам даёт, позже я покажу.</p>
<h3>Анимации и keyframes``</h3>
<p>Если с переходами всё просто – transition это лишь ещё одно правило – то с keyframes всё интереснее. Ведь keyframes – это at-rule, иначе говоря – оператор, указывающий CSS какие конкретно правила и когда применять. Ещё и переиспользовать можно – создали в одном месте, используем других. Напрямую написать @keyframes внутри описания styled-компонента нельзя, но можно воспользоваться ещё одним помощником – функцией @keyframes.</p>
<pre class="language-jsx"><code class="language-jsx"><span class="token keyword">import</span> styled<span class="token punctuation">,</span> <span class="token punctuation">{</span> css<span class="token punctuation">,</span> keyframes <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'styled-components'</span><span class="token punctuation">;</span><br><br><span class="token comment">/* © Nick Pettit, https://github.com/nickpettit/glide */</span><br><br><span class="token keyword">const</span> wobbleKey <span class="token operator">=</span> keyframes<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"><br>  from {<br>    transform: translate3d(0, 0, 0);<br>  }<br><br>  15% {<br>    transform: translate3d(-25%, 0, 0) rotate3d(0, 0, 1, -5deg);<br>  }<br><br>  30% {<br>    transform: translate3d(20%, 0, 0) rotate3d(0, 0, 1, 3deg);<br>  }<br><br>  45% {<br>    transform: translate3d(-15%, 0, 0) rotate3d(0, 0, 1, -3deg);<br>  }<br><br>  60% {<br>    transform: translate3d(10%, 0, 0) rotate3d(0, 0, 1, 2deg);<br>  }<br><br>  75% {<br>    transform: translate3d(-5%, 0, 0) rotate3d(0, 0, 1, -1deg);<br>  }<br><br>  to {<br>    transform: translate3d(0, 0, 0);<br>  }<br></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><br><br><span class="token keyword">const</span> <span class="token function-variable function">wobbleAnimation</span> <span class="token operator">=</span> <span class="token parameter">props</span> <span class="token operator">=></span> css<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"><br>  </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>wobbleKey<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>props<span class="token punctuation">.</span>animationLength<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> ease-in-out infinite;<br></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><br><br><span class="token keyword">const</span> WobbledDiv <span class="token operator">=</span> styled<span class="token punctuation">.</span>div<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"><br>  animation: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>wobbleAnimation<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">;<br></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><br><br><span class="token keyword">function</span> <span class="token function">HelloAnimatedComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>  <span class="token keyword">return</span> <span class="token punctuation">(</span><br>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">WobbleDiv</span></span> <span class="token attr-name">animationLength</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0.8s<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text"><br>      Hello Wobble!<br>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">WobbleDiv</span></span><span class="token punctuation">></span></span><br>  <span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token punctuation">}</span></code></pre>
<p>Удобно? По-моему, очень даже. Но вы точно знаете как минимум ещё одно at-rule, если хоть раз занимались адаптивной разработкой.</p>
<h3>Адаптивная вёрстка и media``</h3>
<p>Естественно, это @media. И вот здесь всё очень удобно, вы просто описываете все правила непосредственно в описании стилизованного компонента. Естественно, мы получаем возможность использовать любые доступные нам переменные, наверное, даже с некоторой пользой:</p>
<pre class="language-jsx"><code class="language-jsx"><span class="token keyword">import</span> styled <span class="token keyword">from</span> <span class="token string">'styled-components'</span><span class="token punctuation">;</span><br><br><span class="token keyword">const</span> size <span class="token operator">=</span> <span class="token punctuation">{</span><br>  mobileS<span class="token operator">:</span> <span class="token string">'320px'</span><span class="token punctuation">,</span><br>  mobileM<span class="token operator">:</span> <span class="token string">'375px'</span><span class="token punctuation">,</span><br>  mobileL<span class="token operator">:</span> <span class="token string">'425px'</span><span class="token punctuation">,</span><br>  tablet<span class="token operator">:</span> <span class="token string">'768px'</span><span class="token punctuation">,</span><br>  laptop<span class="token operator">:</span> <span class="token string">'1024px'</span><span class="token punctuation">,</span><br>  laptopL<span class="token operator">:</span> <span class="token string">'1440px'</span><span class="token punctuation">,</span><br>  desktop<span class="token operator">:</span> <span class="token string">'2560px'</span><br><span class="token punctuation">}</span><br><br><span class="token keyword">const</span> device <span class="token operator">=</span> <span class="token punctuation">{</span><br>  mobileS<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">(min-width: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>size<span class="token punctuation">.</span>mobileS<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span><br>  mobileM<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">(min-width: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>size<span class="token punctuation">.</span>mobileM<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span><br>  mobileL<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">(min-width: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>size<span class="token punctuation">.</span>mobileL<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span><br>  tablet<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">(min-width: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>size<span class="token punctuation">.</span>tablet<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span><br>  laptop<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">(min-width: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>size<span class="token punctuation">.</span>laptop<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span><br>  laptopL<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">(min-width: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>size<span class="token punctuation">.</span>laptopL<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span><br>  desktop<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">(min-width: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>size<span class="token punctuation">.</span>desktop<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span><br>  desktopL<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">(min-width: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>size<span class="token punctuation">.</span>desktop<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span><br><span class="token punctuation">}</span><span class="token punctuation">;</span><br><br><span class="token keyword">const</span> Div <span class="token operator">=</span> styled<span class="token punctuation">.</span>div<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"><br>  color: white;<br>  background-color: red;<br><br>  &amp;:hover {<br>    background-color: black;<br>  }<br><br>  @media </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>device<span class="token punctuation">.</span>mobileS<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> {<br>    color: green;<br>  }<br></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><br><br><span class="token keyword">function</span> <span class="token function">HelloMediaComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>  <span class="token keyword">return</span> <span class="token punctuation">(</span><br>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Div</span></span><span class="token punctuation">></span></span><span class="token plain-text"><br>      Hello Media!<br>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Div</span></span><span class="token punctuation">></span></span><br>  <span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token punctuation">}</span></code></pre>
<p>Мы создали говорящие за себя константы со списками разрешений экранов и определили под них устройства. Они могут быть экспортированы из любого места в проекте и, соответственно, использованы где угодно. Теперь вы знаете достаточно чтобы начать применять SC в реальных проектах.</p>
<h3>Композиция</h3>
<p>&quot;Подожди, дядя, – скажете вы. – У нас тут в CSS есть композиция классов, а с SCSS это вообще в культ возведено и композицию классов мы определяем вложенностью. Амперсанд наше всё!&quot;. И будете правы в своём вопросе. Но, кажется, вы забыли, что цель CSS-in-JS в итоге – создать всё те же классы. И вот здесь внезапно композиция классов на наших глазах превращается в композицию компонентов:</p>
<pre class="language-jsx"><code class="language-jsx"><span class="token keyword">import</span> styled <span class="token keyword">from</span> <span class="token string">'styled-components'</span><span class="token punctuation">;</span><br><span class="token keyword">import</span> icon <span class="token keyword">from</span> <span class="token string">'./icon.png'</span><span class="token punctuation">;</span><br><br><span class="token keyword">const</span> Icon <span class="token operator">=</span> styled<span class="token punctuation">.</span>i<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"><br>  display: block;<br>  width: 16px;<br>  height: 16px;<br>  background: trasnsparent url(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>icon<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">) center/contain no-repeat;<br></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><br><br><span class="token keyword">const</span> Button <span class="token operator">=</span> styled<span class="token punctuation">.</span>button<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"><br>  background: none;<br>  border: 1px cyan solid;<br><br>  </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>Icon<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> {<br>    display: inline-block;<br>    width: 12px;<br>    height: 12px;<br>  }<br></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span></code></pre>
<p>Можете прийти в <a href="https://t.me/htmlshitchat">@htmlshitchat</a> и рассказать мне про использование тега i для иконки, но суть-то не в этом. Суть в том, что мы получили такую желанную и привычную композицию классов, да ещё и в виде всеми любимой вложенности. Родительский селектор тоже работает как надо:</p>
<pre class="language-jsx"><code class="language-jsx"><span class="token keyword">import</span> styled <span class="token keyword">from</span> <span class="token string">'styled-components'</span><span class="token punctuation">;</span><br><span class="token keyword">import</span> <span class="token punctuation">{</span>Menu<span class="token punctuation">}</span> <span class="token keyword">from</span> ‘<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>Menu’<span class="token punctuation">;</span><br><span class="token keyword">import</span> <span class="token punctuation">{</span>Dropdown<span class="token punctuation">}</span> <span class="token keyword">from</span> ‘<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>Dropdown’<span class="token punctuation">;</span><br><br><span class="token keyword">const</span> Button <span class="token operator">=</span> styled<span class="token punctuation">.</span>button<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"><br>  border: 1px solid darkgreen;<br>  background: darkkhaki;<br><br>  </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>Menu<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> &amp; {<br>    border: none;<br>    background: transparent;<br>  }<br><br>  </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>Dropdown<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> &amp; {<br>    text-indent: -9999px;<br><br>    &amp;::after {<br>      // create some arrow maybe<br>    }<br>}</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span></code></pre>
<p>Что произошло? Мы использовали родительский селектор (в нашем случае компонент, Button) и заставили его выглядеть иначе при использовании внутри компонентов Menu и Dropdown. Вот так вот просто.</p>
<p>Вот только я сразу хочу предупредить, что так делают довольно редко: это нарушает принцип единственной ответственности (насколько он вообще применим для компонентов). Гораздо чаще делают следующее:</p>
<pre class="language-jsx"><code class="language-jsx"><span class="token keyword">import</span> styled <span class="token keyword">from</span> <span class="token string">'styled-components'</span><span class="token punctuation">;</span><br><span class="token keyword">import</span> Icon <span class="token keyword">from</span> <span class="token string">'@/ui/Icon'</span><span class="token punctuation">;</span><br><br><span class="token keyword">const</span> ButtonIcon <span class="token operator">=</span> <span class="token function">styled</span><span class="token punctuation">(</span>Icon<span class="token punctuation">)</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"><br>    display: inline-block;<br>    width: 12px;<br>    height: 12px;<br></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span></code></pre>
<p>То есть мы просто передаём в styled ваш компонент в качестве аргумента и получаем теговый шаблон, который генерирует новый класс на основе уже существующего класса, принадлежащего стилизуемому элементу, и новых передаваемых стилей. <em>Магическим</em> образом рождается новый компонент. Мне кажется, на этом месте у самых внимательных должна щёлкнуть в голове весьма очевидная идея: &quot;Раз Styled Components заведует классами, можно ли подмешать их к таким привычным обычным компонентам?&quot;.</p>
<p>И ответ – да!</p>
<p>До тех пор пока ваши компоненты могут принимать класс (className) через переданные свойства (props) – SC может собрать композицию! В таком случае я придерживаюсь именования из документации: добавляю префикс Styled к имени компонента, это позволяет избежать любых неоднозначностей и сложностей в именовании. Следующий пример взят из <a href="https://styled-components.com/docs/basics#styling-any-component">документации</a> напрямую. Я вообще крайне рекомендую её прочесть, если владеете английским. Интерактивные примеры там – шик, пройдите и попробуйте.</p>
<pre class="language-jsx"><code class="language-jsx"><span class="token keyword">import</span> styled <span class="token keyword">from</span> <span class="token string">'styled-components'</span><span class="token punctuation">;</span><br><br><span class="token keyword">const</span> <span class="token function-variable function">Link</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> className<span class="token punctuation">,</span> children <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><br>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>className<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text"><br>    </span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token plain-text"><br>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><br><span class="token punctuation">)</span><span class="token punctuation">;</span><br><br><span class="token keyword">const</span> StyledLink <span class="token operator">=</span> <span class="token function">styled</span><span class="token punctuation">(</span>Link<span class="token punctuation">)</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"><br>  color: palevioletred;<br>  font-weight: bold;<br></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><br><br><span class="token function">render</span><span class="token punctuation">(</span><br>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text"><br>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Link</span></span><span class="token punctuation">></span></span><span class="token plain-text">Unstyled, boring Link</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Link</span></span><span class="token punctuation">></span></span><span class="token plain-text"><br>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token plain-text"><br>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">StyledLink</span></span><span class="token punctuation">></span></span><span class="token plain-text">Styled, exciting Link</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">StyledLink</span></span><span class="token punctuation">></span></span><span class="token plain-text"><br>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><br><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h3>Typescript</h3>
<p>ТИПИЗАЦИЯ</p>
<h2>Использованные материалы</h2>
<ul>
<li><a href="https://styled-components.com/">https://styled-components.com/</a></li>
<li><a href="https://emotion.sh/">https://emotion.sh/</a></li>
<li><a href="https://medium.com/swlh/creating-react-styled-components-with-dynamic-tags-and-props-ef965c839e64">https://medium.com/swlh/creating-react-styled-components-with-dynamic-tags-and-props-ef965c839e64</a></li>
<li><a href="https://www.reddit.com/r/reactjs/comments/l4o5k5/the_styledcomponents_happy_path/">https://www.reddit.com/r/reactjs/comments/l4o5k5/the_styledcomponents_happy_path/</a></li>
<li><a href="https://www.joshwcomeau.com/css/styled-components/">https://www.joshwcomeau.com/css/styled-components/</a></li>
<li><a href="https://jsramblings.com/how-to-use-media-queries-with-styled-components/">https://jsramblings.com/how-to-use-media-queries-with-styled-components/</a></li>
</ul>

    ]]>
      </content>
    </entry>
  
    
    <entry>
      <title>Солидбук</title>
      <link href="https://t.me/htmlshit/blog/solidbook/"/>
      <updated>2021-01-17T00:00:00Z</updated>
      <id>https://t.me/htmlshit/blog/solidbook/</id>
      <content type="html">
        <![CDATA[
      <p>Поскольку на данный момент значимую аудиторию канала составляют студенты курсов, было бы нелишним упомянуть о хороших образовательных проектах. Но тема эта слишком огромная, потому начнём с прямых запросов.</p>
<p>В чате канала (@htmlshitchat) проскочило желание почитать об объектно-ориентированном программировании (ООП). Выражено оно было довольно абстрактно, но всё же попробую.</p>
<p>Если бросить в студента книгу <a href="https://ru.wikipedia.org/wiki/Design_Patterns">Паттерны проектирования</a> за авторством “Банды четырёх” и отойти в сторону, можно долго наблюдать за агонией. Но это слишком жестоко, потому пойдём по пути более общих рекомендаций.</p>
<p>Подход ООП, вне зависимости от того, следуете вы ему или нет, позводяет проектировать системы на языке, близком к языку бизнес-правил. Это снижает вероятность ошибки при переводе с «языка бизнеса» на «язык разработки» и наоборот.</p>
<p>В определённый момент на пути любого разработчика встретится понятие, рождённое в ООП-мире: <a href="https://ru.wikipedia.org/wiki/SOLID_(%D0%BE%D0%B1%D1%8A%D0%B5%D0%BA%D1%82%D0%BD%D0%BE-%D0%BE%D1%80%D0%B8%D0%B5%D0%BD%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%BD%D0%BE%D0%B5_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5)">SOLID</a>. Можно, опять же, сходить в Википедию и почитать, что это такое, а можно воспользоваться отличным ресурсом <a href="https://ota-solid.now.sh/">Солидбук</a>.</p>
<p>Авторы, <a href="https://bespoyasov.ru/">Саша Беспоясов</a> и <a href="https://github.com/dex157">Артём Самофалов</a>, объясняют пять принципов, образующих SOLID, на понятных примерах, а в конце каждой секции имеется краткий опросник (<em>флешбеки из школьных времён</em>).</p>
<p>Личный сайт Беспоясова я вообще горячо рекомендую: загляните в раздел <a href="https://bespoyasov.ru/projects/">Проекты</a>, вам понравится.</p>

    ]]>
      </content>
    </entry>
  
</feed>
